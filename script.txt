//@version=6
indicator("Mein Skript", overlay = true, precision = 0, max_labels_count = 500)

startDate = input.time(timestamp('2022-12-01'), title = 'Start Date', tooltip = 'Analysis will begin from this date (only if Date option selected)', group = 'Analysis Range')

var float priceCompareMargin = 0.02
var int NUM_CORRECTION_CANDLES = 3

type AllTimeLowState
    int atl_bar
    float atl_price_high
    float atl_price_low
    label atl_label_index
    int prev_p3d_atl_bar
    float prev_p3d_atl_price_high
    float prev_p3d_atl_price_low
    label prev_p3d_label_index
    int prev_p2d_atl_bar
    float prev_p2d_atl_price_high
    float prev_p2d_atl_price_low
    label prev_p2d_label_index
    int prev_prev_p3d_atl_bar
    float prev_prev_p3d_atl_price_high
    float prev_prev_p3d_atl_price_low
    label prev_prev_p3d_label_index

var atlState = AllTimeLowState.new()

enum TrendZone
    DownZone
    UpZone
    TrendlessZone

enum PivotPointType
    ATL
    P3D
    P2D
    P2H
    P3H
    TLD
    TLU

type PivotPoint
    PivotPointType pivotType
    float pivotHigh
    float pivotLow
    int barIndex
    label pivotLabel

var array<PivotPoint> pivotHistory = array.new<PivotPoint>(0)

type CurrentState
    TrendZone zone
    PivotPoint pivotPoint
    int numCorrectionCandles = 0

var currentState = CurrentState.new(zone=TrendZone.TrendlessZone, pivotPoint = na)

printBarAndDate(string message = na) =>
    string barInfo = "[Bar: " + str.tostring(bar_index) + "][Time: " + str.format_time(time, "yyyy-MM-dd", syminfo.timezone) + "]"
    if not na(message)
        log.info(message + barInfo)
    else
        log.info("Current bar " + barInfo)

getPivotTypeColor(PivotPointType pivotType) =>
    switch pivotType
        PivotPointType.ATL => color.purple
        PivotPointType.P2D => color.red
        PivotPointType.P3D => color.orange
        PivotPointType.P2H => color.green
        PivotPointType.P3H => color.navy
        PivotPointType.TLD => color.black
        PivotPointType.TLU => color.yellow

getPivotTypeLabelStyle(PivotPointType pivotType) =>
    switch pivotType
        PivotPointType.ATL => label.style_label_up
        PivotPointType.P2D => label.style_label_up
        PivotPointType.P3D => label.style_label_down
        PivotPointType.P2H => label.style_label_down
        PivotPointType.P3H => label.style_label_up
        PivotPointType.TLD => label.style_label_up
        PivotPointType.TLU => label.style_label_down
    
getPivotTypeLabelY(PivotPointType pivotType) =>
    switch pivotType
        PivotPointType.ATL => low
        PivotPointType.P2D => low
        PivotPointType.P3D => high
        PivotPointType.P2H => high
        PivotPointType.P3H => low
        PivotPointType.TLD => low
        PivotPointType.TLU => high

createLabelAndHistoryAtCurrentBar(PivotPointType pivotType, bool replaceLast = false) =>
    currentState.numCorrectionCandles := 0
    if replaceLast
        label.delete(pivotHistory.get(-1).pivotLabel)
        pivotHistory.pop()
    label labelIndex = label.new(x = bar_index, y = getPivotTypeLabelY(pivotType), text = str.tostring(pivotType), style = getPivotTypeLabelStyle(pivotType), color = getPivotTypeColor(pivotType), textcolor = color.white)
    pivotHistory.push(PivotPoint.new(barIndex = bar_index, pivotHigh = high, pivotLow = low, pivotType = pivotType, pivotLabel = labelIndex))

replaceLastLabel(PivotPointType pivotType) =>
    PivotPoint lastPivot = pivotHistory.pop()
    label.delete(lastPivot.pivotLabel)
    lastPivot.pivotType := pivotType
    label labelIndex = label.new(x = lastPivot.barIndex, y = lastPivot.pivotHigh, text = str.tostring(pivotType), style = getPivotTypeLabelStyle(pivotType), color = getPivotTypeColor(pivotType), textcolor = color.white)
    pivotHistory.push(lastPivot)

checkIfWithinRange() =>
    time >= startDate

initStatesAfterAllTimeLow() =>
    printBarAndDate("Init states after All Time Low")
    currentState.zone := TrendZone.DownZone
    // Clear all labels
    for i = 0 to (array.size(pivotHistory) == 0 ? na : array.size(pivotHistory) - 1)
        label.delete(array.get(pivotHistory, i).pivotLabel)
    array.clear(pivotHistory)
    prev_prev_p3d = PivotPoint.new(pivotType=PivotPointType.P3D,
         pivotHigh=atlState.prev_prev_p3d_atl_price_high,
         pivotLow=atlState.prev_prev_p3d_atl_price_low,
         barIndex=atlState.prev_prev_p3d_atl_bar,
         pivotLabel=atlState.prev_prev_p3d_label_index)
    pivotHistory.push(prev_prev_p3d)
    prev_p2d = PivotPoint.new(pivotType=PivotPointType.P2D,
         pivotHigh=atlState.prev_p2d_atl_price_high,
         pivotLow=atlState.prev_p2d_atl_price_low,
         barIndex=atlState.prev_p2d_atl_bar,
         pivotLabel=atlState.prev_p2d_label_index)
    pivotHistory.push(prev_p2d)
    prev_p3d_obj = PivotPoint.new(pivotType=PivotPointType.P3D,
         pivotHigh=atlState.prev_p3d_atl_price_high,
         pivotLow=atlState.prev_p3d_atl_price_low,
         barIndex=atlState.prev_p3d_atl_bar,
         pivotLabel=atlState.prev_p3d_label_index)
    pivotHistory.push(prev_p3d_obj)
    // We treat ATL as P2D in history
    atl = PivotPoint.new(pivotType=PivotPointType.P2D,
         pivotHigh=atlState.atl_price_high,
         pivotLow=atlState.atl_price_low,
         barIndex=atlState.atl_bar,
         pivotLabel=atlState.atl_label_index)
    pivotHistory.push(atl)

processNewAllTimeLow() =>
    if na(atlState.atl_price_low) or low < atlState.atl_price_low
        atlState.atl_price_low := low
        atlState.atl_price_high := high
        atlState.atl_bar := bar_index
        
        if not na(atlState.atl_label_index)
            label.delete(atlState.atl_label_index)
            atlState.atl_label_index := na
        atlState.atl_label_index := label.new(x = atlState.atl_bar, y = atlState.atl_price_low, text = 'ATL', style = label.style_label_up, color = getPivotTypeColor(PivotPointType.ATL), textcolor = color.white)

        // Find previous P3D, P2D
    
        // Step 1: Iterate backwards from the current bar
        if bar_index >= 1
            atlState.prev_p3d_atl_price_high := high[1] // High of the bar immediately preceding the current bar
            atlState.prev_p3d_atl_price_low := low[1]
            atlState.prev_p3d_atl_bar := bar_index - 1
            
            int lower_candles_count = 0
            int prev_p2d_bar_index = na
            bool prev_p3d_found = false
            for i = 2 to bar_index 
                // Find the first high point going back from ATL
                if (high[i] + priceCompareMargin * high[i]) > atlState.prev_p3d_atl_price_high and not prev_p3d_found
                    atlState.prev_p3d_atl_price_high := high[i]
                    atlState.prev_p3d_atl_price_low := low[i]
                    atlState.prev_p3d_atl_bar := bar_index - i
                    continue
                else
                    prev_p3d_found := true

                // Step 2: From that prev_p3d, go backwards again
                // Search for at least two candles that are lower than prev_p3d.
                // Mark that spot as prev_p2d.
                if low[i] < atlState.prev_p3d_atl_price_low
                    lower_candles_count := lower_candles_count + 1
                    if lower_candles_count >= 2 and na(prev_p2d_bar_index)
                        prev_p2d_bar_index := bar_index - i // Store the index of this bar
                        atlState.prev_p2d_atl_price_low := low[i]
                        atlState.prev_p2d_atl_price_high := high[i]
                        atlState.prev_p2d_atl_bar := prev_p2d_bar_index
                else
                    // Reset count if a candle is not lower than prev_p3d before finding two
                    if lower_candles_count < 2
                        // lower_candles_count := 0
                        log.info('Reset lower candles')
                    else
                        break // Stop searching for prev_p2d if condition is met or broken

            // Step 3: From prev_p2d, iterate backwards again. Look for next highest P3D
            if not na(prev_p2d_bar_index)
                int j = (bar_index - prev_p2d_bar_index) + 1
                atlState.prev_prev_p3d_atl_price_high := high[j]
                atlState.prev_prev_p3d_atl_price_low := low[j]
                atlState.prev_prev_p3d_atl_bar := bar_index - j
                bool prev_prev_p3d_found = false
                for i = j + 1 to bar_index
                    if (high[i] + priceCompareMargin * high[i]) > atlState.prev_prev_p3d_atl_price_high and not prev_prev_p3d_found
                        atlState.prev_prev_p3d_atl_price_high := high[i]
                        atlState.prev_prev_p3d_atl_price_low := low[i]
                        atlState.prev_prev_p3d_atl_bar := bar_index - i
                        continue
                    else 
                        prev_prev_p3d_found := true
                        break

            // Plotting for visualization (optional)
            label.delete(atlState.prev_p3d_label_index)
            label.delete(atlState.prev_p2d_label_index)
            label.delete(atlState.prev_prev_p3d_label_index)

            atlState.prev_p3d_label_index := label.new(x = atlState.prev_p3d_atl_bar, y = atlState.prev_p3d_atl_price_high, text = 'Prev P3D', style = label.style_label_down, color = getPivotTypeColor(PivotPointType.P3D), textcolor = color.white)
            atlState.prev_p2d_label_index := label.new(x = atlState.prev_p2d_atl_bar, y = atlState.prev_p2d_atl_price_low, text = 'Prev P2D', style = label.style_label_up, color = getPivotTypeColor(PivotPointType.P2D), textcolor = color.white)
            atlState.prev_prev_p3d_label_index := label.new(x = atlState.prev_prev_p3d_atl_bar, y = atlState.prev_prev_p3d_atl_price_high, text = 'Prev P3D', style = label.style_label_down, color = getPivotTypeColor(PivotPointType.P3D), textcolor = color.white)

        initStatesAfterAllTimeLow()



processDownTrend() =>
    lastPivot = pivotHistory.get(-1)
    if lastPivot.pivotType == PivotPointType.P2D
        printBarAndDate("[Down Trend] Process current bar at zone " + str.tostring(currentState.zone))
        if low < lastPivot.pivotLow
            createLabelAndHistoryAtCurrentBar(PivotPointType.P2D, true)
            
        else if high > lastPivot.pivotHigh
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                currentState.numCorrectionCandles := 0
                PivotPoint lastP3D = pivotHistory.get(-2)
                if high > lastP3D.pivotHigh
                    currentState.zone := TrendZone.TrendlessZone
                    createLabelAndHistoryAtCurrentBar(PivotPointType.TLU)
                else
                    createLabelAndHistoryAtCurrentBar(PivotPointType.P3D)

    if lastPivot.pivotType == PivotPointType.P3D
        if high > lastPivot.pivotHigh
            PivotPoint lastP3D = pivotHistory.get(-3)
            if high > lastP3D.pivotHigh
                currentState.zone := TrendZone.TrendlessZone
                createLabelAndHistoryAtCurrentBar(PivotPointType.TLU, true)
            else
                createLabelAndHistoryAtCurrentBar(PivotPointType.P3D, true)
        else if low < lastPivot.pivotLow
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                createLabelAndHistoryAtCurrentBar(PivotPointType.P2D)

processUpTrend() =>
    // printBarAndDate("[Up Trend] Process current bar at zone " + str.tostring(currentState.zone))
    lastPivot = pivotHistory.get(-1)
    if lastPivot.pivotType == PivotPointType.P2H
        if high > lastPivot.pivotHigh
            // Replace old P2H with higher P2H
            currentState.numCorrectionCandles := 0
            createLabelAndHistoryAtCurrentBar(PivotPointType.P2H, true)
        else
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                createLabelAndHistoryAtCurrentBar(PivotPointType.P3H)
    
    if lastPivot.pivotType == PivotPointType.P3H
        if low < lastPivot.pivotLow
            currentState.numCorrectionCandles := 0
            PivotPoint previousP3H = pivotHistory.get(-3)
            if previousP3H.pivotType != PivotPointType.P3H
                printBarAndDate("WRONG TYPE, NOT P3H")
            if previousP3H.pivotLow < low
                // If we're higher than the P3H before the current P3H, just replace old P3H with lower P3H
                createLabelAndHistoryAtCurrentBar(PivotPointType.P3H, true)
            else
                // Else this is actually a TLD and we enter trendless zone
                currentState.zone := TrendZone.TrendlessZone
                createLabelAndHistoryAtCurrentBar(PivotPointType.TLD, true)
        else if high > lastPivot.pivotHigh
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                createLabelAndHistoryAtCurrentBar(PivotPointType.P2H)

processTrendless() =>
    //printBarAndDate("[Trendless] Process current bar at zone " + str.tostring(currentState.zone))
    lastPivot = pivotHistory.get(-1)
    if lastPivot.pivotType == PivotPointType.P2D
        // First TLU after last P2D
        createLabelAndHistoryAtCurrentBar(PivotPointType.TLU)

    if lastPivot.pivotType == PivotPointType.TLU
        if high > lastPivot.pivotHigh
            // Replace old TLU with higher TLU
            currentState.numCorrectionCandles := 0
            createLabelAndHistoryAtCurrentBar(PivotPointType.TLU, true)
        else
            // We need correction candles
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                // We have found a P3H
                currentState.numCorrectionCandles := 0
                createLabelAndHistoryAtCurrentBar(PivotPointType.P3H)

    if lastPivot.pivotType == PivotPointType.P3H
        if low < lastPivot.pivotLow
            // Replace old P3H with lower P3H
            createLabelAndHistoryAtCurrentBar(PivotPointType.P3H, true)
        PivotPoint lastTLU = pivotHistory.get(-2)
        // TODO: Verify correct pivot type?
        if high > lastTLU.pivotHigh
            // Enter UP Zone
            currentState.numCorrectionCandles := 0
            currentState.zone := TrendZone.UpZone
            // We have found a P2H
            createLabelAndHistoryAtCurrentBar(PivotPointType.P2H)
            printBarAndDate("Transition from trendless to UP")

    if lastPivot.pivotType == PivotPointType.TLD
        if low < lastPivot.pivotLow
            currentState.numCorrectionCandles := 0
            createLabelAndHistoryAtCurrentBar(PivotPointType.TLD, true)
        else
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                currentState.numCorrectionCandles := 0
                // TODO: Probably need to differentiate if the previous zone was UP or Down and chose P2H or P3D
                createLabelAndHistoryAtCurrentBar(PivotPointType.P2H)

    if lastPivot.pivotType == PivotPointType.P2H
        if high > lastPivot.pivotHigh
            currentState.numCorrectionCandles := 0
            createLabelAndHistoryAtCurrentBar(PivotPointType.P2H, true)
        else if low < lastPivot.pivotLow
            currentState.numCorrectionCandles += 1
            if currentState.numCorrectionCandles > NUM_CORRECTION_CANDLES
                currentState.numCorrectionCandles := 0
                if low < pivotHistory.get(-2).pivotLow
                    currentState.zone := TrendZone.DownZone
                    // The last P2H was actually a P3D. Keep old position
                    replaceLastLabel(PivotPointType.P3D)
                    // Now add current position as P2D
                    createLabelAndHistoryAtCurrentBar(PivotPointType.P2D)
                else
                    createLabelAndHistoryAtCurrentBar(PivotPointType.P3H)

    

processCurrentBar() =>
    if currentState.zone == TrendZone.DownZone
        processDownTrend()
    else if currentState.zone == TrendZone.UpZone
        processUpTrend()
    else if currentState.zone == TrendZone.TrendlessZone
        processTrendless()
    else
        printBarAndDate("Unknown Zone")

getTrendZoneColor() =>
    color zoneColor = na
    if currentState.zone == TrendZone.DownZone
        zoneColor := color.new(color.red, 90) // Light red for DownZone
    else if currentState.zone == TrendZone.UpZone
        zoneColor := color.new(color.green, 90) // Light green for UpZone
    else if currentState.zone == TrendZone.TrendlessZone
        zoneColor := color.new(color.gray, 90) // Light gray for TrendlessZone
    zoneColor

if checkIfWithinRange()
    processNewAllTimeLow()
    processCurrentBar()
bgcolor(getTrendZoneColor())
