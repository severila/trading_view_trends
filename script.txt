//@version=6
indicator("Mein Skript", overlay = true, precision = 0, max_labels_count = 500)

startDate = input.time(timestamp('2022-01-01'), title = 'Start Date', tooltip = 'Analysis will begin from this date (only if Date option selected)', group = 'Analysis Range')

var float priceCompareMargin = 0.02

type AllTimeLowState
    int atl_bar
    float atl_price
    label atl_label_index
    int prev_p3d_atl_bar
    float prev_p3d_atl_price
    label prev_p3d_label_index
    int prev_p2d_atl_bar
    float prev_p2d_atl_price
    label prev_p2d_label_index
    int prev_prev_p3d_atl_bar
    float prev_prev_p3d_atl_price
    label prev_prev_p3d_label_index

var atlState = AllTimeLowState.new()


printBarAndDate() =>
    log.info("Current bar " + str.tostring(bar_index) + " and Date " + str.format_time(time, "yyyy-MM-dd HH:mm", syminfo.timezone))

checkIfWithinRange() =>
    time >= startDate

processNewAllTimeLow() =>
    if na(atlState.atl_price) or low < atlState.atl_price
        atlState.atl_price := low
        atlState.atl_bar := bar_index
        log.info("Setting All Time Low Price to: " + str.tostring(atlState.atl_bar))
        // printBarAndDate()
        // TODO: At this point we need to reset all states and start from here
        if not na(atlState.atl_label_index)
            label.delete(atlState.atl_label_index)
            atlState.atl_label_index := na
        atlState.atl_label_index := label.new(x = atlState.atl_bar, y = atlState.atl_price, text = 'ATL', style = label.style_label_up, color = color.purple, textcolor = color.white)

        // Find previous P3D, P2D
    
        // Step 1: Iterate backwards from the current bar
        if bar_index >= 1
            atlState.prev_p3d_atl_price := high[1] // High of the bar immediately preceding the current bar
            atlState.prev_p3d_atl_bar := bar_index - 1
            
            int lower_candles_count = 0
            int prev_p2d_bar_index = na
            bool prev_p3d_found = false
            for i = 2 to bar_index 
                // Find the first high point going back from ATL
                if (high[i] + priceCompareMargin * high[i]) > atlState.prev_p3d_atl_price and not prev_p3d_found
                    atlState.prev_p3d_atl_price := high[i]
                    atlState.prev_p3d_atl_bar := bar_index - i
                    continue
                else
                    prev_p3d_found := true

                // Step 2: From that prev_p3d, go backwards again
                // Search for at least two candles that are lower than prev_p3d.
                // Mark that spot as prev_p2d.
                if high[i] < atlState.prev_p3d_atl_price
                    lower_candles_count := lower_candles_count + 1
                    if lower_candles_count >= 2 and na(prev_p2d_bar_index)
                        prev_p2d_bar_index := bar_index - i // Store the index of this bar
                        atlState.prev_p2d_atl_price := low[i] // Store the high of this bar
                        atlState.prev_p2d_atl_bar := prev_p2d_bar_index
                else
                    // Reset count if a candle is not lower than prev_p3d before finding two
                    if lower_candles_count < 2
                        lower_candles_count := 0
                    else
                        break // Stop searching for prev_p2d if condition is met or broken

            // Step 3: From prev_p2d, iterate backwards again. Look for next highest P3D
            if not na(prev_p2d_bar_index)
                int j = (bar_index - prev_p2d_bar_index) + 1
                atlState.prev_prev_p3d_atl_price := high[j]
                atlState.prev_prev_p3d_atl_bar := bar_index - j
                bool prev_prev_p3d_found = false
                for i = j + 1 to bar_index
                    if (high[i] + priceCompareMargin * high[i]) > atlState.prev_prev_p3d_atl_price and not prev_prev_p3d_found
                        atlState.prev_prev_p3d_atl_price := high[i]
                        atlState.prev_prev_p3d_atl_bar := bar_index - i
                        continue
                    else 
                        prev_prev_p3d_found := true
                        break

            // Plotting for visualization (optional)
            label.delete(atlState.prev_p3d_label_index)
            label.delete(atlState.prev_p2d_label_index)
            label.delete(atlState.prev_prev_p3d_label_index)

            atlState.prev_p3d_label_index := label.new(x = atlState.prev_p3d_atl_bar, y = atlState.prev_p3d_atl_price, text = 'Prev P3D', style = label.style_label_down, color = color.red, textcolor = color.white)
            atlState.prev_p2d_label_index := label.new(x = atlState.prev_p2d_atl_bar, y = atlState.prev_p2d_atl_price, text = 'Prev P2D', style = label.style_label_up, color = color.yellow, textcolor = color.white)
            atlState.prev_prev_p3d_label_index := label.new(x = atlState.prev_prev_p3d_atl_bar, y = atlState.prev_prev_p3d_atl_price, text = 'Prev P3D', style = label.style_label_down, color = color.green, textcolor = color.white)



if checkIfWithinRange()
    // log.info("Processing bar " + str.tostring(bar_index) + " for Date " + str.format_time(time, "yyyy-MM-dd HH:mm", syminfo.timezone))
    processNewAllTimeLow()
